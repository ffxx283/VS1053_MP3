
//_____________________________________________________________
//
	.sect code,PutSmallGlyph	// 77 words
	.export _PutSmallGlyph
_PutSmallGlyph:
F0B14:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6)
	sty I4,(I6)
	ldx (I6),I4
	ldx (I6)+1,NULL	// I6 += 1
	stx A0,(I6)
	sty A1,(I6)+1
	stx B0,(I6)
	sty B1,(I6)+1
	stx C1,(I6)
	sty I0,(I6)+1
	stx I1,(I6)
	sty I2,(I6)+1
	stx LC,(I6)
	sty LS,(I6)+1
	stx LE,(I6)
F0B2:
// (x=0; x<15; x++)
	and NULL,NULL,A0	// 0 -> 'x'
F0B11:
	ldc _lcd0+5,I0	// ETa
	sub NULL,ONES,B0	// 1 -> 1 -> ET7
	ldc _lcd0+4,I2	// ET4
	ldc _buff96c058,B1	// ETc
F0B12:
	ldc 14,LC	// loop 15 iterations
	loop LC,F0B4-1
	nop
//loop resumes
F0B6:	// loop entry
F0B3:	// (loop lvl 2)
// 	}
// {
// 		buff[x] = (glyph&1)? lcd0.textColor : lcd0.backgroundColor;
	ldx (I2),A1	// ET4 ==> 4 -> ETb
	and C0,B0,C1	// 'glyph' and ET7 -> ET8
	nop
	jzc F0B8	// compare against zero
	nop
// jumped away
F0B7:	// (loop lvl 2)
	ldx (I0),A1	// ETa ==> 5 -> ETb
F0B8:	// (loop lvl 2)
	add B1,A0,C1	// ETc + 'x' -> AT1e
	mv C1,I1	// AT1e -> ETd
	stx A1,(I1)	// ETb ==> ETd
// 		glyph >>= 1;
	lsr C0,C0	// 'glyph' << (-1) -> 'glyph'
	sub A0,ONES,A0	// 'x' - (-1) -> 'x'
F0B13:	// (loop lvl 2)
//	(1 nop's needed)
	nop
// loop end
F0B4:	// loop exit
	ldx (I6)+1,NULL	// I6 += 1
// 	LcdFilledRectangle(lcd0.x,lcd0.y,lcd0.x+2,lcd0.y+4,buff,0);
	and NULL,NULL,A0	// 0 -> 1 -> ET0
	stx A0,(I6)+1	// ET0
	ldc _buff96c058,A0	// ETc
	stx A0,(I6)+1	// ETc
	ldc _lcd0+3,I0	// ET14
	ldx (I0),B0	// ET14 ==> 3 -> ET15
	ldc 4,A0	// 4 -> 1 -> ET3
	add B0,A0,A1	// ET15 + ET3 -> ET16
	stx A1,(I6)+1	// ET16
	ldx (I0)-1,NULL	// ET14 += -1
	ldx (I0),A1	// ET14 ==> 2 -> ET19
	ldc 2,B1	// 2 -> 1 -> ET17
	add A1,B1,B1	// ET19 + ET17 -> ET1a
	stx B1,(I6)+1	// ET1a
	stx B0,(I6)+1	// ET15
	stx A1,(I6)	// ET19
	ldc _lcd0+2,I0	// ET18
	call _LcdFilledRectangle
	nop
// jumped away
F0B9:
	ldx (I6)-6,NULL	// I6 += -6
// 	lcd0.x+=4;
	ldx (I0),A1	// ET18 ==> 2 -> ET19
	add A1,A0,A0	// ET19 + ET3 -> ET1b
	stx A0,(I0)	// ET1b ==> ET18
F0B1:
	ldx (I6)-1,LE
	ldy (I6),LS
	ldx (I6)-1,LC
	ldy (I6),I2
	ldx (I6)-1,I1
	ldy (I6),I0
	ldx (I6)-1,C1
	ldy (I6),B1
	ldx (I6)-1,B0
	ldy (I6),A1
	ldx (I6)-1,A0
	ldx (I4),I6
	ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away

//_____________________________________________________________
//
	.sect code,PutSmallInteger	// 86 words
	.export _PutSmallInteger
_PutSmallInteger:
F1B26:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6)
	sty I4,(I6)
	ldx (I6),I4
	ldx (I6)+7,NULL	// I6 += 9
	ldx (I6)+2,NULL	// ...
	stx A0,(I6)
	sty A1,(I6)+1
	stx B0,(I6)
	sty B1,(I6)+1
	stx I0,(I6)
	sty I2,(I6)+1
	stx LC,(I6)
	sty LS,(I6)+1
	stx LE,(I6)
	add C0,NULL,B1	// C0 -> 'n'
F1B2:
	ldx (I4)+1,NULL	// I4 += 1

// (n<0)
	mv I4,I0	// I4 -> [] -> 'p'
	ldx (I4)-1,NULL	// I4 += -1
	sub B1,NULL,B1	// 'n' < (0) -> (0)
	nop
	jlt F1B3	// signed compare
	nop
// jumped away
	j F1B6
	nop
// jumped away
F1B3:
// 	}
// {
// 		n = -n;
	sub NULL,B1,B1	// (0) - 'n' -> 'n'
// 		PutSmallGlyph(0x180);
	ldc 384,C0	// 384 -> C0
	call _PutSmallGlyph
	nop
// jumped away
	j F1B6
	nop
// jumped away
F1B6:	// (loop lvl 2)
// 	}
// 	do {
// 		*p++ = n%10;
	ldc 10,C0	// 10 -> 0 -> ET4
	add B1,NULL,B0	// 'n' -> B0
	add C0,NULL,A0	// ET4 -> A0
	call divide16signed
	nop
// jumped away
F1B9:	// (loop lvl 2)
	add A1,NULL,B0	// A1 -> ET5
	stx B0,(I0)	// ET5 ==> 'p'
// 		n /= 10;
	add B1,NULL,B0	// 'n' -> B0
	add C0,NULL,A0	// ET4 -> A0
	call divide16signed
	nop
// jumped away
	ldx (I0)+1,NULL	// 'p' += 1
F1B10:	// (loop lvl 2)
	add A0,NULL,B1	// A0 -> 'n'
	sub B1,NULL,B1	// 'n' != (0) -> (0)
	nop
	jzc F1B6	// signed compare
	nop
// jumped away
F1B18:
	ldc _smallglyphs,B1	// ETa
F1B20:
	ldx (I4)+1,NULL	// I4 += 1
	mv I0,C0	// 'p' -> 'p'
	mv I4,A0	// AT10 -> AT21
	ldx (I4)-1,NULL	// I4 += -1
	mv I0,A1	// 'p' -> AT20
	sub A1,A0,A0	// AT20 <= AT21 -> AT11
	nop
	jle F1B12	// signed compare
	nop
// jumped away
F1B19:
	add A0,ONES,A0	// AT11 + (-1) -> AT11
	loop A0,F1B12-1
	nop
//loop resumes
F1B14:	// loop entry
F1B11:	// (loop lvl 2)
// 	}
// {
// 		PutSmallGlyph(smallglyphs[*--p]);
	add C0,ONES,A0	// 'p' + (-1) -> ETc
	mv A0,I0	// ETc -> AT13
	ldx (I0),A0	// AT13 ==> -1 -> ETd
	add B1,A0,A0	// ETa + ETd -> AT1f
	mv A0,I2	// AT1f -> ETe
	ldx (I2),C0	// ETe ==> ETf
	call _PutSmallGlyph
	nop
// jumped away
F1B21:	// (loop lvl 2)
	mv I0,C0	// AT13 -> 'p'
//	(0 nop's needed)
// loop end
F1B12:	// loop exit
F1B1:
	ldx (I6)-1,LE
	ldy (I6),LS
	ldx (I6)-1,LC
	ldy (I6),I2
	ldx (I6)-1,I0
	ldy (I6),B1
	ldx (I6)-1,B0
	ldy (I6),A1
	ldx (I6)-1,A0
	ldx (I4),I6
	ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away

//_____________________________________________________________
//
	.sect data_x,const_x	// 13 words
	.export _smallglyphs
_smallglyphs:
	.word 11114, 9362, 29347, 14499, 18925, 30927, 15310, 18855
	.word 10922, 14826, 8192, 27556, 15049

//_____________________________________________________________
//
	.sect data_x,bss_x	// 15 words
_buff96c058:
	.bss 15

	.end
